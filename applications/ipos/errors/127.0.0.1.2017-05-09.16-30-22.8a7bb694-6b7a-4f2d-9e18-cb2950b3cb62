(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> define_table argument is not a Field or Table: <Set (((company_info.id = 6) AND (ipo_info.company_id = 6)) AND (company_description.company_id = 6))>"
p3
sS'layer'
p4
S'/Users/Brandon/Develop/ipo_web2py/applications/ipos/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n# -------------------------------------------------------------------------\n# This is a sample controller\n# - index is the default action of any application\n# - user is required for authentication and authorization\n# - download is for downloading files uploaded in the db (does streaming)\n# -------------------------------------------------------------------------\n\nfrom IpoFetcher import IpoFetcher\nfrom CompanyInformationFetcher import CompanyInformationFetcher\nfrom DataMatcher import DataMatcher\n\nimport json\nimport os\n\nno_input_text = "123__NO_INPUT_TEXT__123"\n\ndef index():\n    redirect(URL(\'matcher\'))\n\ndef matcher():\n    text_input = None\n\n    match_all=False\n    if request.vars.has_key(\'match_all\') and request.vars[\'match_all\'] == "true":\n        match_all = True\n\n    if request.vars.has_key(\'keyWords\') and request.vars[\'keyWords\']:\n        text_input = request.vars[\'keyWords\']\n    else:\n        filepath = os.path.join(request.folder, \'uploads\', \'keyWords.txt\')\n        with open(filepath, \'r\') as text_input_file:\n            text_input = text_input_file.read()\n\n    time_to_expire = 60*60*24 #cache daily\n    ipos = cache.disk(\'ipos\', lambda: IpoFetcher().ipos, time_expire=time_to_expire)    \n    companyData = cache.disk(\'companies\', lambda: CompanyInformationFetcher(ipos).companies, time_expire=time_to_expire)    \n    matches = DataMatcher(text_input,match_all,companyData).matches\n\n    groups=[("This Week", "this_week"),("Next Week","next_week"),("Future","future")]\n    return dict(message=T(\'IPO Matcher\'),matches=matches,groups=groups,text_area_input=text_input)\n\ndef submit_keyword_input():\n\n    variables={}\n    if request.vars.post_form == "submit":\n        variables[\'keyWords\'] = request.vars.text_input\n    elif request.vars.post_form =="match_all":\n        variables[\'match_all\'] = "true"\n    redirect(URL(\'matcher\',vars=variables))\n\n\ndef add_company():\n    company_info = db.company_info\n    company_info.data_source_id.writable = company_info.data_source_id.readable = False\n    ipo_info = db.ipo_info\n    ipo_info.data_source_id.writable = ipo_info.data_source_id.readable = False\n    ipo_info.company_id.writable = ipo_info.company_id.readable = False\n    description = db.company_description\n    description.company_id.writable =  description.company_id.readable = False\n    description.data_source_id.writable = description.data_source_id.readable = False\n    record = db((db.company_info.id == request.args(0)) & (db.ipo_info.company_id == request.args(0)) & (db.company_description.company_id == request.args(0)))\n    # NEED TO ADD UPDATE\n    print record\n    if record:\n        form=SQLFORM.factory(company_info,ipo_info, description, record)\n    else: \n        form=SQLFORM.factory(company_info,ipo_info, description)\n    if form.process().accepted:\n        companyId = db.company_info.insert(**db.company_info._filter_fields(form.vars))\n        form.vars.company_id=companyId\n        id = db.ipo_info.insert(**db.ipo_info._filter_fields(form.vars))\n        id = db.company_description.insert(**db.company_description._filter_fields(form.vars))\n        response.flash = \'form accepted\'\n    elif form.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill the form\'\n    return dict(form=form)\n\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(add_company)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/Brandon/Develop/ipo_web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/Brandon/Develop/ipo_web2py/applications/ipos/controllers/default.py", line 105, in <module>\n  File "/Users/Brandon/Develop/ipo_web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/Brandon/Develop/ipo_web2py/applications/ipos/controllers/default.py", line 68, in add_company\n    form=SQLFORM.factory(company_info,ipo_info, description, record)\n  File "/Users/Brandon/Develop/ipo_web2py/gluon/sqlhtml.py", line 1808, in factory\n    return SQLFORM(DAL(None).define_table(table_name, *fields),\n  File "/Users/Brandon/Develop/ipo_web2py/gluon/packages/dal/pydal/base.py", line 834, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/Users/Brandon/Develop/ipo_web2py/gluon/packages/dal/pydal/base.py", line 851, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "/Users/Brandon/Develop/ipo_web2py/gluon/packages/dal/pydal/objects.py", line 299, in __init__\n    field\nSyntaxError: define_table argument is not a Field or Table: <Set (((company_info.id = 6) AND (ipo_info.company_id = 6)) AND (company_description.company_id = 6))>\n'
p11
s.